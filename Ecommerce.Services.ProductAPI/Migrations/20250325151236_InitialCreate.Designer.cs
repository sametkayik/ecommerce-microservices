// <auto-generated />
using Ecommerce.Services.ProductAPI.dbcontexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ecommerce.Services.ProductAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250325151236_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ecommerce.Services.ProductAPI.Models.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"));

                    b.Property<string>("Alt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Src")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImageId");

                    b.HasIndex("ProductId");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            ImageId = 1,
                            Alt = "Black Nike Shoe",
                            ProductId = 1,
                            Src = "1.png"
                        },
                        new
                        {
                            ImageId = 2,
                            Alt = "White Nike Shoe",
                            ProductId = 1,
                            Src = "2.png"
                        },
                        new
                        {
                            ImageId = 3,
                            Alt = "Gray Adidas Shoe",
                            ProductId = 2,
                            Src = "3.png"
                        },
                        new
                        {
                            ImageId = 4,
                            Alt = "Blue Adidas Shoe",
                            ProductId = 2,
                            Src = "4.png"
                        },
                        new
                        {
                            ImageId = 5,
                            Alt = "Black T-Shirt",
                            ProductId = 3,
                            Src = "5.png"
                        });
                });

            modelBuilder.Entity("Ecommerce.Services.ProductAPI.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Collection")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<bool>("Hot")
                        .HasColumnType("bit");

                    b.Property<bool>("New")
                        .HasColumnType("bit");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Brand = "Nike",
                            Category = "Shoes",
                            Collection = "[\"SPORT\",\"NEW\"]",
                            Description = "Koşu için ideal, hafif ve rahat spor ayakkabı.",
                            Discount = 10,
                            Hot = true,
                            New = true,
                            Price = 120.0,
                            Rating = 4.7999999999999998,
                            Stock = 15,
                            Tags = "[\"running\",\"nike\",\"sport\",\"black\",\"white\"]",
                            Title = "Nike Air Zoom Pegasus 39"
                        },
                        new
                        {
                            ProductId = 2,
                            Brand = "Adidas",
                            Category = "Shoes",
                            Collection = "[\"RUNNING\",\"NEW ARRIVALS\"]",
                            Description = "Boost taban teknolojisi ile ekstra konfor sunan ayakkabı.",
                            Discount = 15,
                            Hot = false,
                            New = true,
                            Price = 180.0,
                            Rating = 4.7000000000000002,
                            Stock = 10,
                            Tags = "[\"running\",\"adidas\",\"boost\",\"gray\",\"blue\"]",
                            Title = "Adidas Ultraboost 22"
                        },
                        new
                        {
                            ProductId = 3,
                            Brand = "Under Armour",
                            Category = "Clothing",
                            Collection = "[\"TRAINING\",\"CASUAL\"]",
                            Description = "Günlük kullanım ve spor aktiviteleri için ideal tişört.",
                            Discount = 0,
                            Hot = false,
                            New = false,
                            Price = 35.0,
                            Rating = 4.5,
                            Stock = 20,
                            Tags = "[\"tshirt\",\"underarmour\",\"black\",\"blue\",\"s\",\"m\",\"l\"]",
                            Title = "Under Armour Sportstyle T-Shirt"
                        });
                });

            modelBuilder.Entity("Ecommerce.Services.ProductAPI.Models.Variant", b =>
                {
                    b.Property<int>("VariantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VariantId"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImageId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VariantId");

                    b.HasIndex("ImageId");

                    b.HasIndex("ProductId");

                    b.ToTable("Variants");

                    b.HasData(
                        new
                        {
                            VariantId = 1,
                            Color = "Black",
                            ImageId = 1,
                            ProductId = 1,
                            Size = "42",
                            Sku = "NK-PEG39-BLK"
                        },
                        new
                        {
                            VariantId = 2,
                            Color = "White",
                            ImageId = 2,
                            ProductId = 1,
                            Size = "44",
                            Sku = "NK-PEG39-WHT"
                        },
                        new
                        {
                            VariantId = 3,
                            Color = "Gray",
                            ImageId = 3,
                            ProductId = 2,
                            Size = "40",
                            Sku = "AD-UB22-GRY"
                        },
                        new
                        {
                            VariantId = 4,
                            Color = "Blue",
                            ImageId = 4,
                            ProductId = 2,
                            Size = "42",
                            Sku = "AD-UB22-BLU"
                        },
                        new
                        {
                            VariantId = 5,
                            Color = "Black",
                            ImageId = 5,
                            ProductId = 3,
                            Size = "M",
                            Sku = "UA-TSHRT-BLK"
                        },
                        new
                        {
                            VariantId = 6,
                            Color = "Black",
                            ImageId = 5,
                            ProductId = 3,
                            Size = "L",
                            Sku = "UA-TSHRT-BLK"
                        });
                });

            modelBuilder.Entity("Ecommerce.Services.ProductAPI.Models.Image", b =>
                {
                    b.HasOne("Ecommerce.Services.ProductAPI.Models.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ecommerce.Services.ProductAPI.Models.Variant", b =>
                {
                    b.HasOne("Ecommerce.Services.ProductAPI.Models.Image", "Image")
                        .WithMany("Variants")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ecommerce.Services.ProductAPI.Models.Product", "Product")
                        .WithMany("Variants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ecommerce.Services.ProductAPI.Models.Image", b =>
                {
                    b.Navigation("Variants");
                });

            modelBuilder.Entity("Ecommerce.Services.ProductAPI.Models.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Variants");
                });
#pragma warning restore 612, 618
        }
    }
}
